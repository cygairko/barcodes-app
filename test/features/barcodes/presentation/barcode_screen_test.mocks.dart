// Mocks generated by Mockito 5.4.5 from annotations
// in barcodes/test/features/barcodes/presentation/barcode_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:barcodes/features/barcodes/domain/barcode_entry.dart' as _i9;
import 'package:barcodes/features/barcodes/presentation/barcodes_list_controller.dart' as _i8;
import 'package:barcodes/features/settings/data/settings_repository.dart' as _i7;
import 'package:barcodes/utils/brightness_service.dart' as _i5;
import 'package:barcodes/utils/data_store.dart' as _i2;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sembast/sembast.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDataStore_0 extends _i1.SmartFake implements _i2.DataStore {
  _FakeDataStore_0(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeStoreRef_1<K extends Object?, V extends Object?> extends _i1.SmartFake implements _i3.StoreRef<K, V> {
  _FakeStoreRef_1(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeAutoDisposeAsyncNotifierProviderRef_2<T> extends _i1.SmartFake
    implements _i4.AutoDisposeAsyncNotifierProviderRef<T> {
  _FakeAutoDisposeAsyncNotifierProviderRef_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(parent, parentInvocation);
}

class _FakeAsyncValue_3<T> extends _i1.SmartFake implements _i4.AsyncValue<T> {
  _FakeAsyncValue_3(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

/// A class which mocks [BrightnessService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBrightnessService extends _i1.Mock implements _i5.BrightnessService {
  MockBrightnessService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> setBrightness(double? brightness) =>
      (super.noSuchMethod(
            Invocation.method(#setBrightness, [brightness]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<double> getCurrentBrightness() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentBrightness, []),
            returnValue: _i6.Future<double>.value(0.0),
          )
          as _i6.Future<double>);

  @override
  _i6.Future<void> resetBrightness() =>
      (super.noSuchMethod(
            Invocation.method(#resetBrightness, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [SettingsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsRepository extends _i1.Mock implements _i7.SettingsRepository {
  MockSettingsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DataStore get datastore =>
      (super.noSuchMethod(
            Invocation.getter(#datastore),
            returnValue: _FakeDataStore_0(this, Invocation.getter(#datastore)),
          )
          as _i2.DataStore);

  @override
  _i3.StoreRef<String, Object?> get storeRef =>
      (super.noSuchMethod(
            Invocation.getter(#storeRef),
            returnValue: _FakeStoreRef_1<String, Object?>(
              this,
              Invocation.getter(#storeRef),
            ),
          )
          as _i3.StoreRef<String, Object?>);

  @override
  _i6.Future<bool> getAutomaticScreenBrightness() =>
      (super.noSuchMethod(
            Invocation.method(#getAutomaticScreenBrightness, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<void> setAutomaticScreenBrightness({
    required bool? isAutoBrightness,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#setAutomaticScreenBrightness, [], {
              #isAutoBrightness: isAutoBrightness,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<double> getMaxScreenBrightnessLevel() =>
      (super.noSuchMethod(
            Invocation.method(#getMaxScreenBrightnessLevel, []),
            returnValue: _i6.Future<double>.value(0.0),
          )
          as _i6.Future<double>);

  @override
  _i6.Future<void> setMaxScreenBrightnessLevel(double? value) =>
      (super.noSuchMethod(
            Invocation.method(#setMaxScreenBrightnessLevel, [value]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [BarcodesListController].
///
/// See the documentation for Mockito's code generation for more information.
class MockBarcodesListController extends _i1.Mock implements _i8.BarcodesListController {
  MockBarcodesListController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AutoDisposeAsyncNotifierProviderRef<void> get ref =>
      (super.noSuchMethod(
            Invocation.getter(#ref),
            returnValue: _FakeAutoDisposeAsyncNotifierProviderRef_2<void>(
              this,
              Invocation.getter(#ref),
            ),
          )
          as _i4.AutoDisposeAsyncNotifierProviderRef<void>);

  @override
  _i4.AsyncValue<void> get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeAsyncValue_3<void>(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i4.AsyncValue<void>);

  @override
  set state(_i4.AsyncValue<void>? newState) => super.noSuchMethod(
    Invocation.setter(#state, newState),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> get future =>
      (super.noSuchMethod(
            Invocation.getter(#future),
            returnValue: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<bool> add(_i9.BarcodeEntry? entry) =>
      (super.noSuchMethod(
            Invocation.method(#add, [entry]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<bool> delete(int? entryId) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [entryId]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  void listenSelf(
    void Function(_i4.AsyncValue<void>?, _i4.AsyncValue<void>)? listener, {
    void Function(Object, StackTrace)? onError,
  }) => super.noSuchMethod(
    Invocation.method(#listenSelf, [listener], {#onError: onError}),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> update(
    _i6.FutureOr<void> Function(void)? cb, {
    _i6.FutureOr<void> Function(Object, StackTrace)? onError,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#update, [cb], {#onError: onError}),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  bool updateShouldNotify(
    _i4.AsyncValue<void>? previous,
    _i4.AsyncValue<void>? next,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateShouldNotify, [previous, next]),
            returnValue: false,
          )
          as bool);
}
